{"version":3,"file":"flattenCSS.js","sourceRoot":"","sources":["../../../src/utils/styled/flattenCSS.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAC,MAAM,WAAW,CAAC;AAC9D,OAAO,YAAY,MAAM,8BAA8B,CAAC;AAGxD,SAAS,UAAU,CAAiB,UAAa,EAAE,oBAAgC;IACjF,IAAM,QAAQ,GAAa,EAAE,CAAC;IACtB,IAAA,IAAI,GAAiC,oBAAoB,KAArD,EAAgB,YAAY,GAAK,oBAAoB,aAAzB,CAAyB;IAEjE,KAAK,IAAM,GAAG,IAAI,UAAU,EAAE;QAC5B,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YAC5B,SAAS;SACV;QAED,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YAC7B,QAAQ,CAAC,IAAI,OAAb,QAAQ,+BAAM,UAAG,GAAG,OAAI,UAAK,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,oBAAoB,CAAC,YAAE,GAAG,WAAE;SACtF;aAAM,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YACpC,IAAM,YAAY,GAAG,YAAY,CAAC,CAAC,0BAAK,IAAI,GAAG,wCAAK,YAAY,kBAAK,YAAY,UAAE,UAAE,CAAC,CAAC,YAAY,CAAA;YAEnG,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAC9B,QAAQ,CAAC,IAAI,CAAC,UAAG,MAAM,CAAC,GAAG,CAAC,eAAK,UAAU,CAAC,GAAG,CAAC,MAAG,CAAC,CAAA;aACrD;iBAAM;gBACL,QAAQ,CAAC,IAAI,CAAC,UAAG,MAAM,CAAC,GAAG,CAAC,eAAK,UAAU,CAAC,GAAG,CAAC,SAAG,IAAI,MAAG,CAAC,CAAA;aAC5D;SACF;aAAM;YACL,QAAQ,CAAC,IAAI,CAAC,UAAG,MAAM,CAAC,GAAG,CAAC,eAAK,UAAU,CAAC,GAAG,CAAC,MAAG,CAAC,CAAC;SACtD;KACF;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,eAAe,UAAU,CAAC","sourcesContent":["import {toLine, isObject, isEmpty, isNumber} from \"../helper\";\nimport numericalCSS from \"../../constants/numericalCSS\";\nimport type { ObjectType } from \"../../types/index.types\";\n\nfunction flattenCSS<T = ObjectType>(CSSOptions: T, stylesCreatorOptions: ObjectType): string[] {\n  const CSSChunk: string[] = [];\n  const { unit, numericalCSS: numericalCss } = stylesCreatorOptions\n\n  for (const key in CSSOptions) {\n    if (isEmpty(CSSOptions[key])) {\n      continue;\n    }\n\n    if (isObject(CSSOptions[key])) {\n      CSSChunk.push(`${key} {`, ...flattenCSS(CSSOptions[key], stylesCreatorOptions), \"}\");\n    } else if (isNumber(CSSOptions[key])) {\n      const CSSNumerical = numericalCss ? [...new Set([...numericalCSS, ...numericalCss])] : numericalCSS\n\n      if (CSSNumerical.includes(key)) {\n        CSSChunk.push(`${toLine(key)}: ${CSSOptions[key]};`)\n      } else {\n        CSSChunk.push(`${toLine(key)}: ${CSSOptions[key]}${unit};`)\n      }\n    } else {\n      CSSChunk.push(`${toLine(key)}: ${CSSOptions[key]};`);\n    }\n  }\n\n  return CSSChunk;\n}\n\nexport default flattenCSS;\n"]}